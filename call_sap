'use strict';



const AWS = require('aws-sdk');
var https = require('https');

const EMAIL = process.env.email;
const SNS = new AWS.SNS({ apiVersion: '2010-03-31' });


function findExistingSubscription(topicArn, nextToken, cb) {
    const params = {
        TopicArn: topicArn,
        NextToken: nextToken || null,
    };
    SNS.listSubscriptionsByTopic(params, (err, data) => {
        if (err) {
            console.log('Error listing subscriptions.', err);
            return cb(err);
        }
        const subscription = data.Subscriptions.filter((sub) => sub.Protocol === 'email' && sub.Endpoint === EMAIL)[0];
        if (!subscription) {
            if (!data.NextToken) {
                cb(null, null); // indicate that no subscription was found
            } else {
                findExistingSubscription(topicArn, data.NextToken, cb); // iterate over next token
            }
        } else {
            cb(null, subscription); // a subscription was found
        }
    });
}

/**
 * Subscribe the specified EMAIL to a topic.
 */
function createSubscription(topicArn, cb) {
    // check to see if a subscription already exists
    findExistingSubscription(topicArn, null, (err, res) => {
        if (err) {
            console.log('Error finding existing subscription.', err);
            return cb(err);
        }
        if (!res) {
            // no subscription, create one
            const params = {
                Protocol: 'email',
                TopicArn: topicArn,
                Endpoint: EMAIL,
            };
            SNS.subscribe(params, (subscribeErr) => {
                if (subscribeErr) {
                    console.log('Error setting up email subscription.', subscribeErr);
                    return cb(subscribeErr);
                }
                // subscription complete
                console.log(`Subscribed ${EMAIL} to ${topicArn}.`);
                cb(null, topicArn);
            });
        } else {
            // subscription already exists, continue
            cb(null, topicArn);
        }
    });
}

/**
 * Create a topic.
 */
function createTopic(topicName, cb) {
    SNS.createTopic({ Name: topicName }, (err, data) => {
        if (err) {
            console.log('Creating topic failed.', err);
            return cb(err);
        }
        const topicArn = data.TopicArn;
        console.log(`Created topic: ${topicArn}`);
        console.log('Creating subscriptions.');
        createSubscription(topicArn, (subscribeErr) => {
            if (subscribeErr) {
                return cb(subscribeErr);
            }
            // everything is good
            console.log('Topic setup complete.');
            cb(null, topicArn);
        });
    });
}

/**
 * The following JSON template shows what is sent as the payload:
{
    "serialNumber": "GXXXXXXXXXXXXXXXXX",
    "batteryVoltage": "xxmV",
    "clickType": "SINGLE" | "DOUBLE" | "LONG"
}
 *
 * A "LONG" clickType is sent if the first press lasts longer than 1.5 seconds.
 * "SINGLE" and "DOUBLE" clickType payloads are sent for short clicks.
 *
 * For more documentation, follow the link below.
 * http://docs.aws.amazon.com/iot/latest/developerguide/iot-lambda-rule.html
 */
exports.handler = (event, context, callback) => {
    console.log('Received event:', event.clickType);

    if(event.clickType === 'SINGLE' ){
     var body = JSON.stringify({"ID":"1","MESSAGE":"Hello From your IoT Button"});
var request = new https.request({
        hostname: "xsawsproxy-a142e7288.dispatcher.hana.ondemand.com",
       // hostname: "p0307-iflmap.hcisbp.eu1.hana.ondemand.com",
        port: 443,
        //port: 443,
        //path: "/MESSAGE",
        path:"/MSG" ,
        method: "POST",
        headers: {
            //'Authorization': 'UzAwMDk2Mjk4NTY6c1lzYXAjMkA',
            'Content-Type': 'application/json; charset=utf-8',
            'Accept': '*/*'
        }
    });
    request.end( body );
    request.on('response', function (response) {
    console.log('STATUS: ' + response.statusCode);
    if( response.statusCode === 201 ){
        console.log("Successfully received response system");
        callback("Processed correctly");
    }
});
    }
        if(event.clickType === 'DOUBLE' ){
     body = JSON.stringify({"ID":"1","MATNR":"HT-100", "QTY": "10", "MSG": "created via AWS IoT Button"});
request = new https.request({
        hostname: "xsawsproxy-a142e7288.dispatcher.hana.ondemand.com",
       // hostname: "p0307-iflmap.hcisbp.eu1.hana.ondemand.com",
        port: 443,
        //port: 443,
        //path: "/MESSAGE",
        path:"/ORDER" ,
        method: "POST",
        headers: {
            //'Authorization': 'UzAwMDk2Mjk4NTY6c1lzYXAjMkA',
            'Content-Type': 'application/json; charset=utf-8',
            'Accept': '*/*'
        }
    });
    request.end( body );
    request.on('response', function (response) {
    console.log('STATUS: ' + response.statusCode);
    if( response.statusCode === 201 ){
        console.log("Successfully received response system");
        callback("Processed correctly");
    }
});
    }
    if(event.clickType === 'LONG' ){
  //   body = JSON.stringify({"ID":"1","MATNR":"HT-100", "QTY": "10", "MSG": "created via AWS IoT Button"});
request = new https.get({
        hostname: "xsawsproxy-a142e7288.dispatcher.hana.ondemand.com",
       // hostname: "p0307-iflmap.hcisbp.eu1.hana.ondemand.com",
        port: 443,
        //port: 443,
        //path: "/MESSAGE",
        path:"/GETORDERS/displayorders(1)?$format=json" ,
        method: "GET",
        headers: {
            //'Authorization': 'UzAwMDk2Mjk4NTY6c1lzYXAjMkA',
            'Content-Type': 'application/json; charset=utf-8',
            'Accept': '*/*'
        }
    });
    
    
    request.on('response', function (response) {
       
        
    console.log('STATUS: ' + response.statusCode);
    if( response.statusCode === 200 ){
       JSON.parse(response)
        
        console.log("Successfully received response system");
        callback("Processed correctly");
        createTopic('aws-iot-button-sns-topic', (err, topicArn) => {
        if (err) {
            return callback(err);
        }
        console.log(`Publishing to topic ${topicArn}`);
        // publish message
        const params = {
            Message: `${response.d}`,
            Subject: `Hello Fabian please find the orders`,
            TopicArn: topicArn,
        };
        // result will go to function callback
        SNS.publish(params, callback);
    });
    }
});
    }
};
